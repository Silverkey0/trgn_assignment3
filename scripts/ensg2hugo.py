import os,sys,re,getopt

def get_value(keyname,content):
	p = re.compile(r''+keyname+' \"(.*?)\"' ) #This makes regular expression rules, such as re.compile(r'gene_id \"(.*?)\"' )
	for v in  p.findall(content):
	    return v #return is to return the matched content, combined with gene_id=get_value("gene_id",content) in the main function, is to obtain the value of gene_id by matching the content of this line through regular expressions？


def main(argv): #argv is to detect the transmission of the -f2 argument, and use getopt to determine the number provided by -f, so that the program can perform corresponding logical processing
	argv_count=len(argv) #Here is to get the number of argument passed into the command line to determine whether the conditions for continuing to run are met.
	if argv_count>1:
		content="" #build initial variable "content", which can be deleted.
		dicts={} #build dictionary
		number = '' #build initial variable "number", which can be deleted.
		try:
		  opts, args = getopt.getopt(argv,"f:",["number="]) #opts is a simple python library which allows you to easiely parse command line arguments.args is the argument list to be parsed, without the leading reference to the running program. Typically, this means sys.argv[1:]. f is the string of the option column that the script wants to recognize, with options that require an argument followed by a colon (':'; i.e., the same format that Unix getopt() uses)."number" is a list of strings with numbers.
		except getopt.GetoptError:#This module helps scripts to parse the command line arguments in sys.argv. It supports the same conventions as the Unix getopt() function (including the special meanings of arguments of the form ‘-’ and ‘--‘).
#opts, args = getopt.getopt(argv,"f:",["number="])怎么用？getopt.GetoptError在这里是什么意思？
		  print('python3 ensg2hugo.py -f<number> <output>')
		  sys.exit(2) #If the input parameters do not meet the conditions for the program to run, exit the program
		for opt, arg in opts:
		  if opt in ("-f", "--ifile"):
		     number = arg
#The nubmber after "-f" is correspnd with the "arg" variable in the "for" loop. For short, redirect the command line argument obtained through this loop into the variable.
		i=0
		for content in open("Homo_sapiens.GRCh37.75.gtf","r"):
			i=i+1 #i and i=i+1 don't have any meaning, can be deleted
			# print(content)
			gene_id=get_value("gene_id",content)
			transcript_id=get_value("transcript_id",content)
			exon_number=get_value("exon_number",content)
			gene_name=get_value("gene_name",content)
			gene_source=get_value("gene_source",content)
			gene_biotype=get_value("gene_biotype",content)
			transcript_name=get_value("transcript_name",content)
			transcript_source=get_value("transcript_source",content)
			exon_id=get_value("exon.id",content)

			if  gene_id is not None:
				dicts[gene_id]={} #extract gene_id into dictionary.
				dicts[gene_id]['gene_id']=gene_id; #Build a two-dimensional dictionary. For example, dicts[gene_id]['ENSG00000223972']['transcript_id']='ENST00000456328'
# Use if to judge whether the content is matched, if so, the corresponding: dicts[gene_id]['ENSGnumber'][corresponding name]=content
				if  transcript_id is not None:
					dicts[gene_id]['transcript_id']=transcript_id;

				if  exon_number is not None:
					dicts[gene_id]['exon_number']=exon_number;

				if  gene_name is not None:
					dicts[gene_id]['gene_name']=gene_name;

				if  gene_source is not None:
					dicts[gene_id]['gene_source']=gene_source;

				if  gene_biotype is not None:
					dicts[gene_id]['gene_biotype']=gene_biotype;

				if  transcript_name is not None:
					dicts[gene_id]['transcript_name']=transcript_name;

				if  transcript_source is not None:
					dicts[gene_id]['transcript_source']=transcript_source;

				if  exon_id is not None:
					dicts[gene_id]['exon_id']=exon_id;

		if os.path.exists(sys.argv[2]): #check whether the csv document exists or not. 
			if int(number)==2: #The int() converts number to integer and returns.
                #Convert the number to an integer number to match the number 2
				print('"","gene_name","gene_type","logFC","AveExpr"')
			else:
				print('"","gene_id","gene_type","logFC","AveExpr"')
			for csv in open(sys.argv[2],"r"):
				p=csv.split(",") #splits a string into a list with a seperator ",".
				n2=p[1]
				# and n2 !="\"gene_id\""
				if n2.find('.') != -1 :
					gene_id=n2.split(".")
					gene_id=gene_id[0].replace("\"","") #p[1] is the second value of the p array generated by the split instruction, the first one is p[0] and the second one is p[1]

					if int(number)==2:
						if gene_id in dicts:
							result =p[0]+",\""+dicts[gene_id]
['gene_name']+"\","+p[2]+","+p[3]+","+p[4].replace("\n","") #The print() function itself will output a \n as a line, replace("\n","") is because when the program is running on the screen, the original p[4] contains a \n, if it is not replaced, the screen will The output will be separated by a blank line, so replace here with \n.
							print(result)
					else:
						result =p[0]+p[1]+","+p[2]+","+p[3]+","+p[4].replace("\n","")
						print(result)
					
		else:
			print(sys.argv[2]+" not exist")
	else:
		print('python3 ensg2hugo.py -f<number> <output>')

if __name__ == '__main__':
	main(sys.argv[1:]) #used to pass argument in line. can be put at anyplace.